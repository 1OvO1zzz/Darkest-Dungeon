//用来Ctrl+CV的套话
//你可以扩展它的功能
//具体解释到脚本里看哦>-<
------------------------------------------

！！！Foreword：

//前缀VS_的意思是静态变量
//前缀VM_的意思是成员变量

//前缀PS_的意思是静态属性
//前缀PM_的意思是成员属性

//前缀FS_的意思是静态方法
//前缀FM_的意思是成员方法

//...代表你试着可去脚本内部修改

！！！
------------------------------------------

>-InputMgr-< Document

Usage: 在你需要输入检测的脚本里面的初始化函数里注册实践

Example: 纯净版脚本模版
public class InputMgrExample
{    
    private void Start()
    {        
        EventCenter.GetInstance().AddEventListener<KeyCode>("CertainKeyUp", (callbackkey) =>
        {            
            if (callbackkey == InputMgr.GetInstance().W)
            {

            }
        });
        
        EventCenter.GetInstance().AddEventListener<KeyCode>("CertainKeyUp", ___Down);        
    }

    private void ___Down(KeyCode key)
    {    
        if (key == InputMgr.GetInstance().W)
        {

        }
    }
}         

Inherit: >- BaseAutoInstance_Mono<InputMgr> -<

Variable
    Static
        No

    Member
        private bool isStart //用来标识输入检测的关闭和开启

        -
        public KeyCode W = KeyCode.N //等号右边的是默认值
        public KeyCode A = KeyCode.A //这说明你可以通过给这些变量赋值来实现自定义键
        public KeyCode S = KeyCode.S //你也可以在这些键的基础上添加一些键
        public KeyCode D = KeyCode.D //因为这些都是默认的太少了
        public KeyCode UpArrow = KeyCode.UpArrow; //可能不能满足你的欲望>-<
        public KeyCode DownArrow = KeyCode.DownArrow
        -
        
Property

    Static
        No

    Member
        No

Function

    Static
        No

    Member
        public void StartOrEndCheck(bool isOpen) //用来改变VM_isStart的值
                                                 //参数isOpen会直接赋值给isStart

        private void CheckKeyCode(KeyCode key) //用来检测按键抬起按下...
                                               //触发抬起按下...事件
                                               //-注意- 你没必要调用这个函数

                                               //你可以扩展它的功能
                                               //具体解释到脚本里看哦>-<
    
    Life
        Update //里面处理了每一帧的输入检测
               //通过EventCenter里的EventTrigger

               //你可以扩展它的功能
               //具体解释到脚本里看哦>-<
               
问题:待补充.....